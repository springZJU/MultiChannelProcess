clear; clc
TANKPATH = 'F:\RNP\Rat1_SPR\Rat1SPR20230505';

%% 
MERGEPATH = check_mkdir(TANKPATH,'Merge1'); 
load (fullfile(MERGEPATH,'mergePara.mat'));
chAll = 384;
fs = 30000;

NPYPATH = fullfile(MERGEPATH, 'th9_7'); % the path including ks_result
% ch =  [0 1 4 7 8 1008 9 10 12 13 14 16 17 20 21 23 24 25 26 27 28 29 30]; % channels index of kilosort, that means chKs = chTDT - 1;
% idx = [25 24 23 22 19 20 18 21 16 17 15 13 14 12 11 9 8 7 10 6  3 2 0]; % the corresponding id
% kiloSpikeAll = cell(max([chAll ch]),1);

[spikeIdx, clusterIdx, templates, spikeTemplateIdx] = parseNPY(NPYPATH);
Idxs = sortrows(tabulate(clusterIdx), 2, "descend");
idx = Idxs(:, 2) > 1000;
tempIdx = Idxs(idx, [1, 2]);
nTemplates = size(templates, 1);

temp = [clusterIdx, spikeIdx];
kiloSpikeAll = cellfun(@(x) [double(spikeIdx(clusterIdx == x))/fs, x*ones(sum(clusterIdx == x), 1)], num2cell(tempIdx(:, 1)), "UniformOutput", false);
idx = tempIdx(:, 1);
ch = tempIdx(:, 1);
% %% Plot template
% Fig = figure;
% maximizeFig(Fig);
% for chN = 1:length(tempIdx)
%     kiloClusters = idx(chN);
%     kiloSpikeTimeIdx = [];
%     for index = 1:length(kiloClusters)
%         kiloSpikeTimeIdx = [kiloSpikeTimeIdx; spikeIdx(clusterIdx == kiloClusters(index))];
%     end
% 
%     %     kiloSpikeTimeIdx = kiloSpikeTimeIdx(kiloSpikeTimeIdx <= max(t) * fs);
%     kiloSpikeTime = double(kiloSpikeTimeIdx - 1) / fs;
%     kiloSpikeAll{ch(chN)+1} = [kiloSpikeTime ch(chN)*ones(length(kiloSpikeTime),1)];
% end
% % saveas(Fig,[NPYPATH  '\cluster templates.jpg']);   % comment by zyy on 2023/3/3
save([NPYPATH, '\selectCh.mat'], 'ch', 'idx', '-mat');

%% split sort data into different blocks
T = cellfun(@sum,waveLength);

for blks = 1:length(BLOCKPATH)
    if blks == length(BLOCKPATH)
        t = [segPoint(blks), inf];
    else
        t = [segPoint(blks), segPoint(blks + 1)];
    end
    
sortdataBuffer = cell2mat(kiloSpikeAll);
[~,selectIdx] = findWithinInterval(sortdataBuffer(:,1),t);
sortdata = sortdataBuffer(selectIdx,:);
sortdata(:,1) = sortdata(:,1) - t(1);

onsetIdx = ceil(t(1) * fs);
wfWin = [-30, 30];
IDandCHANNEL = [idx; zeros(1, length(idx)); mod(ch, 1000)]';
disp(strcat("Processing blocks (", num2str(blks), "/", num2str(length(BLOCKPATH)), ") ..."));
spkWave = getWaveForm_singleID_v2(fs, BLOCKPATH{blks}, NPYPATH, idx, IDandCHANNEL, wfWin, onsetIdx);
save([BLOCKPATH{blks} '\sortdata.mat'], 'sortdata', 'spkWave');
end


%% update recording excel
[mPath,mName]=fileparts(mfilename('fullpath'));
cd(mPath);
if contains(TANKPATH, "dxy", "IgnoreCase", true)
    recordPath = "..\utils\RatSiliconRecording\DXY_RLA_TBOffset_Recording.xlsx";
elseif contains(TANKPATH, "zyy", "IgnoreCase", true)
    recordPath = "..\utils\RatSiliconRecording\ZYY_RLA_TBOffset_Recording.xlsx";
elseif contains(TANKPATH, "spr", "IgnoreCase", true)
    recordPath = "..\utils\RatSiliconRecording\SPR_RLA_TBOffset_Recording.xlsx";
end
recordInfo = table2struct(readtable(recordPath));
changeIdx = find(matches({recordInfo.BLOCKPATH}', BLOCKPATH'));
for i = changeIdx'
    recordInfo(i).sort = 1;
    recordInfo(i).ks_ChSel = strjoin(string(ch), ",");
    recordInfo(i).ks_ID = strjoin(string(idx), ",");
end
writetable(struct2table(recordInfo), recordPath);



function [resVal,idx] = findWithinInterval(value,range)
    idx = find(value>range(1) & value<range(2));
    resVal = value(idx);
end
